// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: getcd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Getcd {

  /// <summary>Holder for reflection information generated from getcd.proto</summary>
  public static partial class GetcdReflection {

    #region Descriptor
    /// <summary>File descriptor for getcd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GetcdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtnZXRjZC5wcm90bxIFZ2V0Y2QijgEKD3JlZ2lzdHJ5X3NlcnZlchILCgNh",
            "cHAYASABKAkSDgoGc2VydmVyGAIgASgJEhAKCGRpdmlzaW9uGAMgASgJEgwK",
            "BG5vZGUYBCABKAkSEQoJdXNlX2FnZW50GAUgASgREhMKC25vZGVfc3RhdHVz",
            "GAYgASgREhYKDnNlcnZpY2Vfc3RhdHVzGAcgASgRIrABChByZWdpc3RyeV9z",
            "ZXJ2aWNlEgsKA2FwcBgBIAEoCRIOCgZzZXJ2ZXIYAiABKAkSEAoIZGl2aXNp",
            "b24YAyABKAkSDAoEbm9kZRgEIAEoCRIPCgdzZXJ2aWNlGAUgASgJEhIKCnNl",
            "cnZpY2VfaXAYBiABKAkSFAoMc2VydmljZV9wb3J0GAcgASgREhAKCHJwY19w",
            "b3J0GAggASgREhIKCmFkbWluX3BvcnQYCSABKBEiFAoScXVlcnlfcmVnaXN0",
            "cnlfcmVxIngKEnF1ZXJ5X3JlZ2lzdHJ5X3JzcBIOCgZyZXN1bHQYASABKAUS",
            "JwoHc2VydmVycxgCIAMoCzIWLmdldGNkLnJlZ2lzdHJ5X3NlcnZlchIpCghz",
            "ZXJ2aWNlcxgDIAMoCzIXLmdldGNkLnJlZ2lzdHJ5X3NlcnZpY2UiLQoXcXVl",
            "cnlfZ2xvYmFsX2NvbmZpZ19yZXESEgoKY2F0ZWdvcmllcxgBIAMoCSJ4Cg5j",
            "YXRlZ29yeV9lbnRyeRIQCghjYXRlZ29yeRgBIAEoCRIpCgJrdhgCIAMoCzId",
            "LmdldGNkLmNhdGVnb3J5X2VudHJ5Lkt2RW50cnkaKQoHS3ZFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlEKF3F1ZXJ5X2dsb2JhbF9j",
            "b25maWdfcnNwEg4KBnJlc3VsdBgBIAEoBRImCgdlbnRyaWVzGAIgAygLMhUu",
            "Z2V0Y2QuY2F0ZWdvcnlfZW50cnkiFwoVcXVlcnlfcHJvdG9fbGltaXRfcmVx",
            "ItUBChFwcm90b19saW1pdF9lbnRyeRIQCghwcm90b19pZBgBIAEoBRIbChNw",
            "bGF5ZXJfbGltaXRfZW5hYmxlGAIgASgFEhoKEnBsYXllcl9saW1pdF9jb3Vu",
            "dBgDIAEoBRIdChVwbGF5ZXJfbGltaXRfZHVyYXRpb24YBCABKAUSGwoTc2Vy",
            "dmVyX2xpbWl0X2VuYWJsZRgFIAEoBRIaChJzZXJ2ZXJfbGltaXRfY291bnQY",
            "BiABKAUSHQoVc2VydmVyX2xpbWl0X2R1cmF0aW9uGAcgASgFIlIKFXF1ZXJ5",
            "X3Byb3RvX2xpbWl0X3JzcBIOCgZyZXN1bHQYASABKAUSKQoHZW50cmllcxgC",
            "IAMoCzIYLmdldGNkLnByb3RvX2xpbWl0X2VudHJ5Mv8BCgxHZXRjZFNlcnZp",
            "Y2USRwoNUXVlcnlSZWdpc3RyeRIZLmdldGNkLnF1ZXJ5X3JlZ2lzdHJ5X3Jl",
            "cRoZLmdldGNkLnF1ZXJ5X3JlZ2lzdHJ5X3JzcCIAElUKEVF1ZXJ5R2xvYmFs",
            "Q29uZmlnEh4uZ2V0Y2QucXVlcnlfZ2xvYmFsX2NvbmZpZ19yZXEaHi5nZXRj",
            "ZC5xdWVyeV9nbG9iYWxfY29uZmlnX3JzcCIAEk8KD1F1ZXJ5UHJvdG9MaW1p",
            "dBIcLmdldGNkLnF1ZXJ5X3Byb3RvX2xpbWl0X3JlcRocLmdldGNkLnF1ZXJ5",
            "X3Byb3RvX2xpbWl0X3JzcCIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.registry_server), global::Getcd.registry_server.Parser, new[]{ "App", "Server", "Division", "Node", "UseAgent", "NodeStatus", "ServiceStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.registry_service), global::Getcd.registry_service.Parser, new[]{ "App", "Server", "Division", "Node", "Service", "ServiceIp", "ServicePort", "RpcPort", "AdminPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.query_registry_req), global::Getcd.query_registry_req.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.query_registry_rsp), global::Getcd.query_registry_rsp.Parser, new[]{ "Result", "Servers", "Services" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.query_global_config_req), global::Getcd.query_global_config_req.Parser, new[]{ "Categories" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.category_entry), global::Getcd.category_entry.Parser, new[]{ "Category", "Kv" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.query_global_config_rsp), global::Getcd.query_global_config_rsp.Parser, new[]{ "Result", "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.query_proto_limit_req), global::Getcd.query_proto_limit_req.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.proto_limit_entry), global::Getcd.proto_limit_entry.Parser, new[]{ "ProtoId", "PlayerLimitEnable", "PlayerLimitCount", "PlayerLimitDuration", "ServerLimitEnable", "ServerLimitCount", "ServerLimitDuration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Getcd.query_proto_limit_rsp), global::Getcd.query_proto_limit_rsp.Parser, new[]{ "Result", "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class registry_server : pb::IMessage<registry_server> {
    private static readonly pb::MessageParser<registry_server> _parser = new pb::MessageParser<registry_server>(() => new registry_server());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<registry_server> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public registry_server() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public registry_server(registry_server other) : this() {
      app_ = other.app_;
      server_ = other.server_;
      division_ = other.division_;
      node_ = other.node_;
      useAgent_ = other.useAgent_;
      nodeStatus_ = other.nodeStatus_;
      serviceStatus_ = other.serviceStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public registry_server Clone() {
      return new registry_server(this);
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 1;
    private string app_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string App {
      get { return app_; }
      set {
        app_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 2;
    private string server_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Server {
      get { return server_; }
      set {
        server_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "division" field.</summary>
    public const int DivisionFieldNumber = 3;
    private string division_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Division {
      get { return division_; }
      set {
        division_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 4;
    private string node_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Node {
      get { return node_; }
      set {
        node_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_agent" field.</summary>
    public const int UseAgentFieldNumber = 5;
    private int useAgent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseAgent {
      get { return useAgent_; }
      set {
        useAgent_ = value;
      }
    }

    /// <summary>Field number for the "node_status" field.</summary>
    public const int NodeStatusFieldNumber = 6;
    private int nodeStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeStatus {
      get { return nodeStatus_; }
      set {
        nodeStatus_ = value;
      }
    }

    /// <summary>Field number for the "service_status" field.</summary>
    public const int ServiceStatusFieldNumber = 7;
    private int serviceStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceStatus {
      get { return serviceStatus_; }
      set {
        serviceStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as registry_server);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(registry_server other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (App != other.App) return false;
      if (Server != other.Server) return false;
      if (Division != other.Division) return false;
      if (Node != other.Node) return false;
      if (UseAgent != other.UseAgent) return false;
      if (NodeStatus != other.NodeStatus) return false;
      if (ServiceStatus != other.ServiceStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (App.Length != 0) hash ^= App.GetHashCode();
      if (Server.Length != 0) hash ^= Server.GetHashCode();
      if (Division.Length != 0) hash ^= Division.GetHashCode();
      if (Node.Length != 0) hash ^= Node.GetHashCode();
      if (UseAgent != 0) hash ^= UseAgent.GetHashCode();
      if (NodeStatus != 0) hash ^= NodeStatus.GetHashCode();
      if (ServiceStatus != 0) hash ^= ServiceStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (App.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(App);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Server);
      }
      if (Division.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Division);
      }
      if (Node.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Node);
      }
      if (UseAgent != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(UseAgent);
      }
      if (NodeStatus != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(NodeStatus);
      }
      if (ServiceStatus != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(ServiceStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (App.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(App);
      }
      if (Server.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Server);
      }
      if (Division.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Division);
      }
      if (Node.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Node);
      }
      if (UseAgent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UseAgent);
      }
      if (NodeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(NodeStatus);
      }
      if (ServiceStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ServiceStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(registry_server other) {
      if (other == null) {
        return;
      }
      if (other.App.Length != 0) {
        App = other.App;
      }
      if (other.Server.Length != 0) {
        Server = other.Server;
      }
      if (other.Division.Length != 0) {
        Division = other.Division;
      }
      if (other.Node.Length != 0) {
        Node = other.Node;
      }
      if (other.UseAgent != 0) {
        UseAgent = other.UseAgent;
      }
      if (other.NodeStatus != 0) {
        NodeStatus = other.NodeStatus;
      }
      if (other.ServiceStatus != 0) {
        ServiceStatus = other.ServiceStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            App = input.ReadString();
            break;
          }
          case 18: {
            Server = input.ReadString();
            break;
          }
          case 26: {
            Division = input.ReadString();
            break;
          }
          case 34: {
            Node = input.ReadString();
            break;
          }
          case 40: {
            UseAgent = input.ReadSInt32();
            break;
          }
          case 48: {
            NodeStatus = input.ReadSInt32();
            break;
          }
          case 56: {
            ServiceStatus = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class registry_service : pb::IMessage<registry_service> {
    private static readonly pb::MessageParser<registry_service> _parser = new pb::MessageParser<registry_service>(() => new registry_service());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<registry_service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public registry_service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public registry_service(registry_service other) : this() {
      app_ = other.app_;
      server_ = other.server_;
      division_ = other.division_;
      node_ = other.node_;
      service_ = other.service_;
      serviceIp_ = other.serviceIp_;
      servicePort_ = other.servicePort_;
      rpcPort_ = other.rpcPort_;
      adminPort_ = other.adminPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public registry_service Clone() {
      return new registry_service(this);
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 1;
    private string app_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string App {
      get { return app_; }
      set {
        app_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 2;
    private string server_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Server {
      get { return server_; }
      set {
        server_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "division" field.</summary>
    public const int DivisionFieldNumber = 3;
    private string division_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Division {
      get { return division_; }
      set {
        division_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 4;
    private string node_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Node {
      get { return node_; }
      set {
        node_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 5;
    private string service_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_ip" field.</summary>
    public const int ServiceIpFieldNumber = 6;
    private string serviceIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceIp {
      get { return serviceIp_; }
      set {
        serviceIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_port" field.</summary>
    public const int ServicePortFieldNumber = 7;
    private int servicePort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServicePort {
      get { return servicePort_; }
      set {
        servicePort_ = value;
      }
    }

    /// <summary>Field number for the "rpc_port" field.</summary>
    public const int RpcPortFieldNumber = 8;
    private int rpcPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcPort {
      get { return rpcPort_; }
      set {
        rpcPort_ = value;
      }
    }

    /// <summary>Field number for the "admin_port" field.</summary>
    public const int AdminPortFieldNumber = 9;
    private int adminPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdminPort {
      get { return adminPort_; }
      set {
        adminPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as registry_service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(registry_service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (App != other.App) return false;
      if (Server != other.Server) return false;
      if (Division != other.Division) return false;
      if (Node != other.Node) return false;
      if (Service != other.Service) return false;
      if (ServiceIp != other.ServiceIp) return false;
      if (ServicePort != other.ServicePort) return false;
      if (RpcPort != other.RpcPort) return false;
      if (AdminPort != other.AdminPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (App.Length != 0) hash ^= App.GetHashCode();
      if (Server.Length != 0) hash ^= Server.GetHashCode();
      if (Division.Length != 0) hash ^= Division.GetHashCode();
      if (Node.Length != 0) hash ^= Node.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (ServiceIp.Length != 0) hash ^= ServiceIp.GetHashCode();
      if (ServicePort != 0) hash ^= ServicePort.GetHashCode();
      if (RpcPort != 0) hash ^= RpcPort.GetHashCode();
      if (AdminPort != 0) hash ^= AdminPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (App.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(App);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Server);
      }
      if (Division.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Division);
      }
      if (Node.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Node);
      }
      if (Service.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Service);
      }
      if (ServiceIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServiceIp);
      }
      if (ServicePort != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(ServicePort);
      }
      if (RpcPort != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(RpcPort);
      }
      if (AdminPort != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(AdminPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (App.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(App);
      }
      if (Server.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Server);
      }
      if (Division.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Division);
      }
      if (Node.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Node);
      }
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (ServiceIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceIp);
      }
      if (ServicePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ServicePort);
      }
      if (RpcPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RpcPort);
      }
      if (AdminPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AdminPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(registry_service other) {
      if (other == null) {
        return;
      }
      if (other.App.Length != 0) {
        App = other.App;
      }
      if (other.Server.Length != 0) {
        Server = other.Server;
      }
      if (other.Division.Length != 0) {
        Division = other.Division;
      }
      if (other.Node.Length != 0) {
        Node = other.Node;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.ServiceIp.Length != 0) {
        ServiceIp = other.ServiceIp;
      }
      if (other.ServicePort != 0) {
        ServicePort = other.ServicePort;
      }
      if (other.RpcPort != 0) {
        RpcPort = other.RpcPort;
      }
      if (other.AdminPort != 0) {
        AdminPort = other.AdminPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            App = input.ReadString();
            break;
          }
          case 18: {
            Server = input.ReadString();
            break;
          }
          case 26: {
            Division = input.ReadString();
            break;
          }
          case 34: {
            Node = input.ReadString();
            break;
          }
          case 42: {
            Service = input.ReadString();
            break;
          }
          case 50: {
            ServiceIp = input.ReadString();
            break;
          }
          case 56: {
            ServicePort = input.ReadSInt32();
            break;
          }
          case 64: {
            RpcPort = input.ReadSInt32();
            break;
          }
          case 72: {
            AdminPort = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class query_registry_req : pb::IMessage<query_registry_req> {
    private static readonly pb::MessageParser<query_registry_req> _parser = new pb::MessageParser<query_registry_req>(() => new query_registry_req());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<query_registry_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_registry_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_registry_req(query_registry_req other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_registry_req Clone() {
      return new query_registry_req(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as query_registry_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(query_registry_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(query_registry_req other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class query_registry_rsp : pb::IMessage<query_registry_rsp> {
    private static readonly pb::MessageParser<query_registry_rsp> _parser = new pb::MessageParser<query_registry_rsp>(() => new query_registry_rsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<query_registry_rsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_registry_rsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_registry_rsp(query_registry_rsp other) : this() {
      result_ = other.result_;
      servers_ = other.servers_.Clone();
      services_ = other.services_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_registry_rsp Clone() {
      return new query_registry_rsp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "servers" field.</summary>
    public const int ServersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Getcd.registry_server> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(18, global::Getcd.registry_server.Parser);
    private readonly pbc::RepeatedField<global::Getcd.registry_server> servers_ = new pbc::RepeatedField<global::Getcd.registry_server>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Getcd.registry_server> Servers {
      get { return servers_; }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Getcd.registry_service> _repeated_services_codec
        = pb::FieldCodec.ForMessage(26, global::Getcd.registry_service.Parser);
    private readonly pbc::RepeatedField<global::Getcd.registry_service> services_ = new pbc::RepeatedField<global::Getcd.registry_service>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Getcd.registry_service> Services {
      get { return services_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as query_registry_rsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(query_registry_rsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!servers_.Equals(other.servers_)) return false;
      if(!services_.Equals(other.services_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      hash ^= servers_.GetHashCode();
      hash ^= services_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      servers_.WriteTo(output, _repeated_servers_codec);
      services_.WriteTo(output, _repeated_services_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      size += servers_.CalculateSize(_repeated_servers_codec);
      size += services_.CalculateSize(_repeated_services_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(query_registry_rsp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      servers_.Add(other.servers_);
      services_.Add(other.services_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
          case 26: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class query_global_config_req : pb::IMessage<query_global_config_req> {
    private static readonly pb::MessageParser<query_global_config_req> _parser = new pb::MessageParser<query_global_config_req>(() => new query_global_config_req());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<query_global_config_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_global_config_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_global_config_req(query_global_config_req other) : this() {
      categories_ = other.categories_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_global_config_req Clone() {
      return new query_global_config_req(this);
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_categories_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> categories_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Categories {
      get { return categories_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as query_global_config_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(query_global_config_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!categories_.Equals(other.categories_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= categories_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      categories_.WriteTo(output, _repeated_categories_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += categories_.CalculateSize(_repeated_categories_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(query_global_config_req other) {
      if (other == null) {
        return;
      }
      categories_.Add(other.categories_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class category_entry : pb::IMessage<category_entry> {
    private static readonly pb::MessageParser<category_entry> _parser = new pb::MessageParser<category_entry>(() => new category_entry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<category_entry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public category_entry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public category_entry(category_entry other) : this() {
      category_ = other.category_;
      kv_ = other.kv_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public category_entry Clone() {
      return new category_entry(this);
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 1;
    private string category_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Category {
      get { return category_; }
      set {
        category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kv" field.</summary>
    public const int KvFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_kv_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> kv_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Kv {
      get { return kv_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as category_entry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(category_entry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Category != other.Category) return false;
      if (!Kv.Equals(other.Kv)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Category.Length != 0) hash ^= Category.GetHashCode();
      hash ^= Kv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Category.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Category);
      }
      kv_.WriteTo(output, _map_kv_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Category.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
      }
      size += kv_.CalculateSize(_map_kv_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(category_entry other) {
      if (other == null) {
        return;
      }
      if (other.Category.Length != 0) {
        Category = other.Category;
      }
      kv_.Add(other.kv_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Category = input.ReadString();
            break;
          }
          case 18: {
            kv_.AddEntriesFrom(input, _map_kv_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class query_global_config_rsp : pb::IMessage<query_global_config_rsp> {
    private static readonly pb::MessageParser<query_global_config_rsp> _parser = new pb::MessageParser<query_global_config_rsp>(() => new query_global_config_rsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<query_global_config_rsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_global_config_rsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_global_config_rsp(query_global_config_rsp other) : this() {
      result_ = other.result_;
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_global_config_rsp Clone() {
      return new query_global_config_rsp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Getcd.category_entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Getcd.category_entry.Parser);
    private readonly pbc::RepeatedField<global::Getcd.category_entry> entries_ = new pbc::RepeatedField<global::Getcd.category_entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Getcd.category_entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as query_global_config_rsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(query_global_config_rsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(query_global_config_rsp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class query_proto_limit_req : pb::IMessage<query_proto_limit_req> {
    private static readonly pb::MessageParser<query_proto_limit_req> _parser = new pb::MessageParser<query_proto_limit_req>(() => new query_proto_limit_req());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<query_proto_limit_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_proto_limit_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_proto_limit_req(query_proto_limit_req other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_proto_limit_req Clone() {
      return new query_proto_limit_req(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as query_proto_limit_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(query_proto_limit_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(query_proto_limit_req other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class proto_limit_entry : pb::IMessage<proto_limit_entry> {
    private static readonly pb::MessageParser<proto_limit_entry> _parser = new pb::MessageParser<proto_limit_entry>(() => new proto_limit_entry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<proto_limit_entry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public proto_limit_entry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public proto_limit_entry(proto_limit_entry other) : this() {
      protoId_ = other.protoId_;
      playerLimitEnable_ = other.playerLimitEnable_;
      playerLimitCount_ = other.playerLimitCount_;
      playerLimitDuration_ = other.playerLimitDuration_;
      serverLimitEnable_ = other.serverLimitEnable_;
      serverLimitCount_ = other.serverLimitCount_;
      serverLimitDuration_ = other.serverLimitDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public proto_limit_entry Clone() {
      return new proto_limit_entry(this);
    }

    /// <summary>Field number for the "proto_id" field.</summary>
    public const int ProtoIdFieldNumber = 1;
    private int protoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtoId {
      get { return protoId_; }
      set {
        protoId_ = value;
      }
    }

    /// <summary>Field number for the "player_limit_enable" field.</summary>
    public const int PlayerLimitEnableFieldNumber = 2;
    private int playerLimitEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLimitEnable {
      get { return playerLimitEnable_; }
      set {
        playerLimitEnable_ = value;
      }
    }

    /// <summary>Field number for the "player_limit_count" field.</summary>
    public const int PlayerLimitCountFieldNumber = 3;
    private int playerLimitCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLimitCount {
      get { return playerLimitCount_; }
      set {
        playerLimitCount_ = value;
      }
    }

    /// <summary>Field number for the "player_limit_duration" field.</summary>
    public const int PlayerLimitDurationFieldNumber = 4;
    private int playerLimitDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLimitDuration {
      get { return playerLimitDuration_; }
      set {
        playerLimitDuration_ = value;
      }
    }

    /// <summary>Field number for the "server_limit_enable" field.</summary>
    public const int ServerLimitEnableFieldNumber = 5;
    private int serverLimitEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerLimitEnable {
      get { return serverLimitEnable_; }
      set {
        serverLimitEnable_ = value;
      }
    }

    /// <summary>Field number for the "server_limit_count" field.</summary>
    public const int ServerLimitCountFieldNumber = 6;
    private int serverLimitCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerLimitCount {
      get { return serverLimitCount_; }
      set {
        serverLimitCount_ = value;
      }
    }

    /// <summary>Field number for the "server_limit_duration" field.</summary>
    public const int ServerLimitDurationFieldNumber = 7;
    private int serverLimitDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerLimitDuration {
      get { return serverLimitDuration_; }
      set {
        serverLimitDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as proto_limit_entry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(proto_limit_entry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtoId != other.ProtoId) return false;
      if (PlayerLimitEnable != other.PlayerLimitEnable) return false;
      if (PlayerLimitCount != other.PlayerLimitCount) return false;
      if (PlayerLimitDuration != other.PlayerLimitDuration) return false;
      if (ServerLimitEnable != other.ServerLimitEnable) return false;
      if (ServerLimitCount != other.ServerLimitCount) return false;
      if (ServerLimitDuration != other.ServerLimitDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtoId != 0) hash ^= ProtoId.GetHashCode();
      if (PlayerLimitEnable != 0) hash ^= PlayerLimitEnable.GetHashCode();
      if (PlayerLimitCount != 0) hash ^= PlayerLimitCount.GetHashCode();
      if (PlayerLimitDuration != 0) hash ^= PlayerLimitDuration.GetHashCode();
      if (ServerLimitEnable != 0) hash ^= ServerLimitEnable.GetHashCode();
      if (ServerLimitCount != 0) hash ^= ServerLimitCount.GetHashCode();
      if (ServerLimitDuration != 0) hash ^= ServerLimitDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProtoId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProtoId);
      }
      if (PlayerLimitEnable != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerLimitEnable);
      }
      if (PlayerLimitCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerLimitCount);
      }
      if (PlayerLimitDuration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerLimitDuration);
      }
      if (ServerLimitEnable != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerLimitEnable);
      }
      if (ServerLimitCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ServerLimitCount);
      }
      if (ServerLimitDuration != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ServerLimitDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtoId);
      }
      if (PlayerLimitEnable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLimitEnable);
      }
      if (PlayerLimitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLimitCount);
      }
      if (PlayerLimitDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLimitDuration);
      }
      if (ServerLimitEnable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerLimitEnable);
      }
      if (ServerLimitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerLimitCount);
      }
      if (ServerLimitDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerLimitDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(proto_limit_entry other) {
      if (other == null) {
        return;
      }
      if (other.ProtoId != 0) {
        ProtoId = other.ProtoId;
      }
      if (other.PlayerLimitEnable != 0) {
        PlayerLimitEnable = other.PlayerLimitEnable;
      }
      if (other.PlayerLimitCount != 0) {
        PlayerLimitCount = other.PlayerLimitCount;
      }
      if (other.PlayerLimitDuration != 0) {
        PlayerLimitDuration = other.PlayerLimitDuration;
      }
      if (other.ServerLimitEnable != 0) {
        ServerLimitEnable = other.ServerLimitEnable;
      }
      if (other.ServerLimitCount != 0) {
        ServerLimitCount = other.ServerLimitCount;
      }
      if (other.ServerLimitDuration != 0) {
        ServerLimitDuration = other.ServerLimitDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProtoId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerLimitEnable = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerLimitCount = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerLimitDuration = input.ReadInt32();
            break;
          }
          case 40: {
            ServerLimitEnable = input.ReadInt32();
            break;
          }
          case 48: {
            ServerLimitCount = input.ReadInt32();
            break;
          }
          case 56: {
            ServerLimitDuration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class query_proto_limit_rsp : pb::IMessage<query_proto_limit_rsp> {
    private static readonly pb::MessageParser<query_proto_limit_rsp> _parser = new pb::MessageParser<query_proto_limit_rsp>(() => new query_proto_limit_rsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<query_proto_limit_rsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Getcd.GetcdReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_proto_limit_rsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_proto_limit_rsp(query_proto_limit_rsp other) : this() {
      result_ = other.result_;
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public query_proto_limit_rsp Clone() {
      return new query_proto_limit_rsp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Getcd.proto_limit_entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Getcd.proto_limit_entry.Parser);
    private readonly pbc::RepeatedField<global::Getcd.proto_limit_entry> entries_ = new pbc::RepeatedField<global::Getcd.proto_limit_entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Getcd.proto_limit_entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as query_proto_limit_rsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(query_proto_limit_rsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(query_proto_limit_rsp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
