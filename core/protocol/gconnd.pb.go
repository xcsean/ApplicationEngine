// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gconnd.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// master
type RegisterMasterReq struct {
	Division             string   `protobuf:"bytes,1,opt,name=division,proto3" json:"division,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterMasterReq) Reset()         { *m = RegisterMasterReq{} }
func (m *RegisterMasterReq) String() string { return proto.CompactTextString(m) }
func (*RegisterMasterReq) ProtoMessage()    {}
func (*RegisterMasterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4e23270b453c13, []int{0}
}

func (m *RegisterMasterReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMasterReq.Unmarshal(m, b)
}
func (m *RegisterMasterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMasterReq.Marshal(b, m, deterministic)
}
func (m *RegisterMasterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMasterReq.Merge(m, src)
}
func (m *RegisterMasterReq) XXX_Size() int {
	return xxx_messageInfo_RegisterMasterReq.Size(m)
}
func (m *RegisterMasterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMasterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMasterReq proto.InternalMessageInfo

func (m *RegisterMasterReq) GetDivision() string {
	if m != nil {
		return m.Division
	}
	return ""
}

type RegisterMasterRsp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	MasterId             uint64   `protobuf:"varint,2,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterMasterRsp) Reset()         { *m = RegisterMasterRsp{} }
func (m *RegisterMasterRsp) String() string { return proto.CompactTextString(m) }
func (*RegisterMasterRsp) ProtoMessage()    {}
func (*RegisterMasterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4e23270b453c13, []int{1}
}

func (m *RegisterMasterRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMasterRsp.Unmarshal(m, b)
}
func (m *RegisterMasterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMasterRsp.Marshal(b, m, deterministic)
}
func (m *RegisterMasterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMasterRsp.Merge(m, src)
}
func (m *RegisterMasterRsp) XXX_Size() int {
	return xxx_messageInfo_RegisterMasterRsp.Size(m)
}
func (m *RegisterMasterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMasterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMasterRsp proto.InternalMessageInfo

func (m *RegisterMasterRsp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *RegisterMasterRsp) GetMasterId() uint64 {
	if m != nil {
		return m.MasterId
	}
	return 0
}

// session
type SessionAliveReq struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionAliveReq) Reset()         { *m = SessionAliveReq{} }
func (m *SessionAliveReq) String() string { return proto.CompactTextString(m) }
func (*SessionAliveReq) ProtoMessage()    {}
func (*SessionAliveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4e23270b453c13, []int{2}
}

func (m *SessionAliveReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionAliveReq.Unmarshal(m, b)
}
func (m *SessionAliveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionAliveReq.Marshal(b, m, deterministic)
}
func (m *SessionAliveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionAliveReq.Merge(m, src)
}
func (m *SessionAliveReq) XXX_Size() int {
	return xxx_messageInfo_SessionAliveReq.Size(m)
}
func (m *SessionAliveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionAliveReq.DiscardUnknown(m)
}

var xxx_messageInfo_SessionAliveReq proto.InternalMessageInfo

func (m *SessionAliveReq) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type SessionAliveRsp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionAliveRsp) Reset()         { *m = SessionAliveRsp{} }
func (m *SessionAliveRsp) String() string { return proto.CompactTextString(m) }
func (*SessionAliveRsp) ProtoMessage()    {}
func (*SessionAliveRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4e23270b453c13, []int{3}
}

func (m *SessionAliveRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionAliveRsp.Unmarshal(m, b)
}
func (m *SessionAliveRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionAliveRsp.Marshal(b, m, deterministic)
}
func (m *SessionAliveRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionAliveRsp.Merge(m, src)
}
func (m *SessionAliveRsp) XXX_Size() int {
	return xxx_messageInfo_SessionAliveRsp.Size(m)
}
func (m *SessionAliveRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionAliveRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SessionAliveRsp proto.InternalMessageInfo

func (m *SessionAliveRsp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SessionAliveRsp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*RegisterMasterReq)(nil), "protocol.register_master_req")
	proto.RegisterType((*RegisterMasterRsp)(nil), "protocol.register_master_rsp")
	proto.RegisterType((*SessionAliveReq)(nil), "protocol.session_alive_req")
	proto.RegisterType((*SessionAliveRsp)(nil), "protocol.session_alive_rsp")
}

func init() { proto.RegisterFile("gconnd.proto", fileDescriptor_bf4e23270b453c13) }

var fileDescriptor_bf4e23270b453c13 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x36, 0xa5, 0x0d, 0xc9, 0xa0, 0x05, 0x57, 0x28, 0x21, 0xa5, 0x50, 0xe2, 0x25, 0xa7, 0x80,
	0xf5, 0x09, 0xc4, 0x83, 0x44, 0x14, 0xcb, 0xe6, 0x01, 0x42, 0xcc, 0x0e, 0x65, 0x31, 0xcd, 0xc6,
	0xdd, 0x6d, 0xce, 0x3e, 0xba, 0x74, 0x92, 0xfa, 0x43, 0xda, 0x9e, 0x86, 0xf9, 0xfe, 0xe6, 0x07,
	0x2e, 0x37, 0xa5, 0xaa, 0x6b, 0x91, 0x34, 0x5a, 0x59, 0xc5, 0x3c, 0x2a, 0xa5, 0xaa, 0x42, 0x28,
	0x95, 0xc6, 0x0e, 0x8d, 0xee, 0xe0, 0x46, 0xe3, 0x46, 0x1a, 0x8b, 0x3a, 0xdf, 0x16, 0x54, 0x34,
	0x7e, 0xb2, 0x10, 0x3c, 0x21, 0x5b, 0x69, 0xa4, 0xaa, 0x03, 0x67, 0xe9, 0xc4, 0x3e, 0xff, 0xe9,
	0xa3, 0xe7, 0x23, 0x16, 0xd3, 0xb0, 0x19, 0xb8, 0x1a, 0xcd, 0xae, 0xb2, 0x64, 0x98, 0xf0, 0xbe,
	0x63, 0x73, 0xf0, 0x7b, 0x95, 0x14, 0xc1, 0x68, 0xe9, 0xc4, 0x63, 0xee, 0x75, 0x40, 0x2a, 0xa2,
	0x15, 0x5c, 0x1b, 0x34, 0xfb, 0xd8, 0xbc, 0xa8, 0x64, 0x8b, 0x34, 0x7c, 0x01, 0x70, 0x00, 0xa5,
	0xa0, 0xb4, 0x31, 0xf7, 0x7b, 0x24, 0x15, 0xd1, 0xe3, 0xc0, 0x73, 0x66, 0xfa, 0x0c, 0x5c, 0x63,
	0x0b, 0xbb, 0x33, 0x34, 0x7a, 0xc2, 0xfb, 0x6e, 0xf5, 0x35, 0x82, 0xab, 0x27, 0x7a, 0x4f, 0x86,
	0xba, 0x95, 0x25, 0xb2, 0x35, 0x4c, 0x79, 0x7f, 0xd6, 0x2b, 0xad, 0xc7, 0x16, 0xc9, 0xe1, 0x65,
	0xc9, 0x91, 0x1f, 0x85, 0xe7, 0x68, 0xd3, 0x44, 0x17, 0xec, 0x05, 0xa6, 0xa9, 0xc9, 0xba, 0x55,
	0x1f, 0xf6, 0x9b, 0xb2, 0xf9, 0xaf, 0x65, 0x70, 0x76, 0x78, 0x9a, 0xa4, 0xb4, 0x37, 0x80, 0x0c,
	0x6b, 0xb1, 0x2e, 0xca, 0x0f, 0xb4, 0x2c, 0x18, 0x8a, 0x1b, 0x62, 0xc2, 0xdb, 0x3f, 0x8c, 0xd5,
	0x58, 0x6c, 0xf3, 0xff, 0x82, 0x2e, 0x2e, 0x76, 0xde, 0x5d, 0xd2, 0xdd, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xcc, 0xf0, 0x97, 0x5c, 0x27, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GconndServiceClient is the client API for GconndService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GconndServiceClient interface {
	// master management
	RegisterMaster(ctx context.Context, in *RegisterMasterReq, opts ...grpc.CallOption) (*RegisterMasterRsp, error)
	// session query
	IsSessionAlive(ctx context.Context, in *SessionAliveReq, opts ...grpc.CallOption) (*SessionAliveRsp, error)
	// send packets to client(s)
	SendPacket(ctx context.Context, opts ...grpc.CallOption) (GconndService_SendPacketClient, error)
}

type gconndServiceClient struct {
	cc *grpc.ClientConn
}

func NewGconndServiceClient(cc *grpc.ClientConn) GconndServiceClient {
	return &gconndServiceClient{cc}
}

func (c *gconndServiceClient) RegisterMaster(ctx context.Context, in *RegisterMasterReq, opts ...grpc.CallOption) (*RegisterMasterRsp, error) {
	out := new(RegisterMasterRsp)
	err := c.cc.Invoke(ctx, "/protocol.GconndService/RegisterMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gconndServiceClient) IsSessionAlive(ctx context.Context, in *SessionAliveReq, opts ...grpc.CallOption) (*SessionAliveRsp, error) {
	out := new(SessionAliveRsp)
	err := c.cc.Invoke(ctx, "/protocol.GconndService/IsSessionAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gconndServiceClient) SendPacket(ctx context.Context, opts ...grpc.CallOption) (GconndService_SendPacketClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GconndService_serviceDesc.Streams[0], "/protocol.GconndService/SendPacket", opts...)
	if err != nil {
		return nil, err
	}
	x := &gconndServiceSendPacketClient{stream}
	return x, nil
}

type GconndService_SendPacketClient interface {
	Send(*SessionPacket) error
	CloseAndRecv() (*StreamSessionPacketRsp, error)
	grpc.ClientStream
}

type gconndServiceSendPacketClient struct {
	grpc.ClientStream
}

func (x *gconndServiceSendPacketClient) Send(m *SessionPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gconndServiceSendPacketClient) CloseAndRecv() (*StreamSessionPacketRsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamSessionPacketRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GconndServiceServer is the server API for GconndService service.
type GconndServiceServer interface {
	// master management
	RegisterMaster(context.Context, *RegisterMasterReq) (*RegisterMasterRsp, error)
	// session query
	IsSessionAlive(context.Context, *SessionAliveReq) (*SessionAliveRsp, error)
	// send packets to client(s)
	SendPacket(GconndService_SendPacketServer) error
}

// UnimplementedGconndServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGconndServiceServer struct {
}

func (*UnimplementedGconndServiceServer) RegisterMaster(ctx context.Context, req *RegisterMasterReq) (*RegisterMasterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMaster not implemented")
}
func (*UnimplementedGconndServiceServer) IsSessionAlive(ctx context.Context, req *SessionAliveReq) (*SessionAliveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSessionAlive not implemented")
}
func (*UnimplementedGconndServiceServer) SendPacket(srv GconndService_SendPacketServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPacket not implemented")
}

func RegisterGconndServiceServer(s *grpc.Server, srv GconndServiceServer) {
	s.RegisterService(&_GconndService_serviceDesc, srv)
}

func _GconndService_RegisterMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMasterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GconndServiceServer).RegisterMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GconndService/RegisterMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GconndServiceServer).RegisterMaster(ctx, req.(*RegisterMasterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GconndService_IsSessionAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionAliveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GconndServiceServer).IsSessionAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GconndService/IsSessionAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GconndServiceServer).IsSessionAlive(ctx, req.(*SessionAliveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GconndService_SendPacket_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GconndServiceServer).SendPacket(&gconndServiceSendPacketServer{stream})
}

type GconndService_SendPacketServer interface {
	SendAndClose(*StreamSessionPacketRsp) error
	Recv() (*SessionPacket, error)
	grpc.ServerStream
}

type gconndServiceSendPacketServer struct {
	grpc.ServerStream
}

func (x *gconndServiceSendPacketServer) SendAndClose(m *StreamSessionPacketRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gconndServiceSendPacketServer) Recv() (*SessionPacket, error) {
	m := new(SessionPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GconndService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.GconndService",
	HandlerType: (*GconndServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMaster",
			Handler:    _GconndService_RegisterMaster_Handler,
		},
		{
			MethodName: "IsSessionAlive",
			Handler:    _GconndService_IsSessionAlive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPacket",
			Handler:       _GconndService_SendPacket_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gconnd.proto",
}
