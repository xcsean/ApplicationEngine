// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gconnd.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// master
type RegisterMasterReq struct {
	Division             string   `protobuf:"bytes,1,opt,name=division,proto3" json:"division,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterMasterReq) Reset()         { *m = RegisterMasterReq{} }
func (m *RegisterMasterReq) String() string { return proto.CompactTextString(m) }
func (*RegisterMasterReq) ProtoMessage()    {}
func (*RegisterMasterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4e23270b453c13, []int{0}
}

func (m *RegisterMasterReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMasterReq.Unmarshal(m, b)
}
func (m *RegisterMasterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMasterReq.Marshal(b, m, deterministic)
}
func (m *RegisterMasterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMasterReq.Merge(m, src)
}
func (m *RegisterMasterReq) XXX_Size() int {
	return xxx_messageInfo_RegisterMasterReq.Size(m)
}
func (m *RegisterMasterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMasterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMasterReq proto.InternalMessageInfo

func (m *RegisterMasterReq) GetDivision() string {
	if m != nil {
		return m.Division
	}
	return ""
}

type RegisterMasterRsp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	MasterId             uint64   `protobuf:"varint,2,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterMasterRsp) Reset()         { *m = RegisterMasterRsp{} }
func (m *RegisterMasterRsp) String() string { return proto.CompactTextString(m) }
func (*RegisterMasterRsp) ProtoMessage()    {}
func (*RegisterMasterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4e23270b453c13, []int{1}
}

func (m *RegisterMasterRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMasterRsp.Unmarshal(m, b)
}
func (m *RegisterMasterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMasterRsp.Marshal(b, m, deterministic)
}
func (m *RegisterMasterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMasterRsp.Merge(m, src)
}
func (m *RegisterMasterRsp) XXX_Size() int {
	return xxx_messageInfo_RegisterMasterRsp.Size(m)
}
func (m *RegisterMasterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMasterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMasterRsp proto.InternalMessageInfo

func (m *RegisterMasterRsp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *RegisterMasterRsp) GetMasterId() uint64 {
	if m != nil {
		return m.MasterId
	}
	return 0
}

// session
type SessionAliveReq struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionAliveReq) Reset()         { *m = SessionAliveReq{} }
func (m *SessionAliveReq) String() string { return proto.CompactTextString(m) }
func (*SessionAliveReq) ProtoMessage()    {}
func (*SessionAliveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4e23270b453c13, []int{2}
}

func (m *SessionAliveReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionAliveReq.Unmarshal(m, b)
}
func (m *SessionAliveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionAliveReq.Marshal(b, m, deterministic)
}
func (m *SessionAliveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionAliveReq.Merge(m, src)
}
func (m *SessionAliveReq) XXX_Size() int {
	return xxx_messageInfo_SessionAliveReq.Size(m)
}
func (m *SessionAliveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionAliveReq.DiscardUnknown(m)
}

var xxx_messageInfo_SessionAliveReq proto.InternalMessageInfo

func (m *SessionAliveReq) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type SessionAliveRsp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionAliveRsp) Reset()         { *m = SessionAliveRsp{} }
func (m *SessionAliveRsp) String() string { return proto.CompactTextString(m) }
func (*SessionAliveRsp) ProtoMessage()    {}
func (*SessionAliveRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4e23270b453c13, []int{3}
}

func (m *SessionAliveRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionAliveRsp.Unmarshal(m, b)
}
func (m *SessionAliveRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionAliveRsp.Marshal(b, m, deterministic)
}
func (m *SessionAliveRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionAliveRsp.Merge(m, src)
}
func (m *SessionAliveRsp) XXX_Size() int {
	return xxx_messageInfo_SessionAliveRsp.Size(m)
}
func (m *SessionAliveRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionAliveRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SessionAliveRsp proto.InternalMessageInfo

func (m *SessionAliveRsp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SessionAliveRsp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*RegisterMasterReq)(nil), "protocol.register_master_req")
	proto.RegisterType((*RegisterMasterRsp)(nil), "protocol.register_master_rsp")
	proto.RegisterType((*SessionAliveReq)(nil), "protocol.session_alive_req")
	proto.RegisterType((*SessionAliveRsp)(nil), "protocol.session_alive_rsp")
}

func init() { proto.RegisterFile("gconnd.proto", fileDescriptor_bf4e23270b453c13) }

var fileDescriptor_bf4e23270b453c13 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xdd, 0x6a, 0xc2, 0x30,
	0x14, 0x36, 0x43, 0x45, 0x0f, 0x2a, 0x2c, 0x03, 0x91, 0x88, 0x20, 0xd9, 0x4d, 0xaf, 0xca, 0xd6,
	0x3d, 0xc1, 0xd8, 0xc5, 0xe8, 0xd8, 0x40, 0xe2, 0x03, 0x94, 0xae, 0x09, 0x2e, 0xac, 0xb6, 0x35,
	0x49, 0xfb, 0x46, 0xbb, 0xde, 0x2b, 0x8e, 0x26, 0xed, 0x7e, 0xa8, 0xba, 0xab, 0x70, 0xbe, 0x2f,
	0xdf, 0x4f, 0x4e, 0x60, 0xb2, 0x4b, 0xf2, 0x2c, 0xe3, 0x7e, 0xa1, 0x72, 0x93, 0xe3, 0x91, 0x3d,
	0x92, 0x3c, 0x25, 0x93, 0x22, 0x4e, 0xde, 0x85, 0x71, 0x38, 0xbd, 0x85, 0x2b, 0x25, 0x76, 0x52,
	0x1b, 0xa1, 0xa2, 0x7d, 0x6c, 0x0f, 0x25, 0x0e, 0x98, 0xc0, 0x88, 0xcb, 0x4a, 0x6a, 0x99, 0x67,
	0x0b, 0xb4, 0x46, 0xde, 0x98, 0x7d, 0xcf, 0xf4, 0xe9, 0x88, 0x44, 0x17, 0x78, 0x0e, 0x43, 0x25,
	0x74, 0x99, 0x1a, 0x2b, 0x18, 0xb0, 0x66, 0xc2, 0x4b, 0x18, 0x37, 0xb7, 0x24, 0x5f, 0x5c, 0xac,
	0x91, 0xd7, 0x67, 0x23, 0x07, 0x84, 0x9c, 0x06, 0x70, 0xa9, 0x85, 0xae, 0x6d, 0xa3, 0x38, 0x95,
	0x95, 0xb0, 0xe1, 0x2b, 0x80, 0x16, 0x94, 0xdc, 0xba, 0xf5, 0xd9, 0xb8, 0x41, 0x42, 0x4e, 0x1f,
	0x3a, 0x9a, 0x33, 0xe9, 0x73, 0x18, 0x6a, 0x13, 0x9b, 0x52, 0xdb, 0xe8, 0x01, 0x6b, 0xa6, 0xe0,
	0x13, 0xc1, 0xf4, 0xd1, 0x2e, 0x68, 0x2b, 0x54, 0x25, 0x13, 0x81, 0x37, 0x30, 0x63, 0xcd, 0xb3,
	0x5e, 0x6c, 0x3d, 0xbc, 0xf2, 0xdb, 0xa5, 0xf9, 0x47, 0x76, 0x44, 0xce, 0xd1, 0xba, 0xa0, 0x3d,
	0xfc, 0x0c, 0xb3, 0x50, 0x6f, 0x5d, 0xd5, 0xfb, 0xba, 0x29, 0x5e, 0xfe, 0x48, 0x3a, 0xcf, 0x26,
	0xa7, 0xc9, 0xda, 0x2d, 0xf8, 0x40, 0x30, 0x75, 0xc5, 0xda, 0xc6, 0x21, 0xf4, 0x37, 0xa5, 0x7e,
	0xc3, 0x8b, 0xae, 0xd0, 0xfd, 0x31, 0xb9, 0xfe, 0xc5, 0x18, 0x25, 0xe2, 0x7d, 0xf4, 0xf7, 0x82,
	0xb3, 0xf6, 0x90, 0xb3, 0x4a, 0x53, 0xfc, 0xbf, 0x40, 0x1c, 0xc8, 0xc9, 0x3c, 0xda, 0xbb, 0x41,
	0xaf, 0x43, 0x4b, 0xde, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x23, 0xf3, 0xb6, 0x3f, 0x80, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GconndServiceClient is the client API for GconndService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GconndServiceClient interface {
	RegisterMaster(ctx context.Context, in *RegisterMasterReq, opts ...grpc.CallOption) (*RegisterMasterRsp, error)
	IsSessionAlive(ctx context.Context, in *SessionAliveReq, opts ...grpc.CallOption) (*SessionAliveRsp, error)
}

type gconndServiceClient struct {
	cc *grpc.ClientConn
}

func NewGconndServiceClient(cc *grpc.ClientConn) GconndServiceClient {
	return &gconndServiceClient{cc}
}

func (c *gconndServiceClient) RegisterMaster(ctx context.Context, in *RegisterMasterReq, opts ...grpc.CallOption) (*RegisterMasterRsp, error) {
	out := new(RegisterMasterRsp)
	err := c.cc.Invoke(ctx, "/protocol.GconndService/RegisterMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gconndServiceClient) IsSessionAlive(ctx context.Context, in *SessionAliveReq, opts ...grpc.CallOption) (*SessionAliveRsp, error) {
	out := new(SessionAliveRsp)
	err := c.cc.Invoke(ctx, "/protocol.GconndService/IsSessionAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GconndServiceServer is the server API for GconndService service.
type GconndServiceServer interface {
	RegisterMaster(context.Context, *RegisterMasterReq) (*RegisterMasterRsp, error)
	IsSessionAlive(context.Context, *SessionAliveReq) (*SessionAliveRsp, error)
}

// UnimplementedGconndServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGconndServiceServer struct {
}

func (*UnimplementedGconndServiceServer) RegisterMaster(ctx context.Context, req *RegisterMasterReq) (*RegisterMasterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMaster not implemented")
}
func (*UnimplementedGconndServiceServer) IsSessionAlive(ctx context.Context, req *SessionAliveReq) (*SessionAliveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSessionAlive not implemented")
}

func RegisterGconndServiceServer(s *grpc.Server, srv GconndServiceServer) {
	s.RegisterService(&_GconndService_serviceDesc, srv)
}

func _GconndService_RegisterMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMasterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GconndServiceServer).RegisterMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GconndService/RegisterMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GconndServiceServer).RegisterMaster(ctx, req.(*RegisterMasterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GconndService_IsSessionAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionAliveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GconndServiceServer).IsSessionAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GconndService/IsSessionAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GconndServiceServer).IsSessionAlive(ctx, req.(*SessionAliveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GconndService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.GconndService",
	HandlerType: (*GconndServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMaster",
			Handler:    _GconndService_RegisterMaster_Handler,
		},
		{
			MethodName: "IsSessionAlive",
			Handler:    _GconndService_IsSessionAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gconnd.proto",
}

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterServiceClient interface {
	Push(ctx context.Context, opts ...grpc.CallOption) (MasterService_PushClient, error)
	Pull(ctx context.Context, in *StreamSessionPacketReq, opts ...grpc.CallOption) (MasterService_PullClient, error)
}

type masterServiceClient struct {
	cc *grpc.ClientConn
}

func NewMasterServiceClient(cc *grpc.ClientConn) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) Push(ctx context.Context, opts ...grpc.CallOption) (MasterService_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MasterService_serviceDesc.Streams[0], "/protocol.MasterService/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterServicePushClient{stream}
	return x, nil
}

type MasterService_PushClient interface {
	Send(*SessionPacket) error
	CloseAndRecv() (*StreamSessionPacketRsp, error)
	grpc.ClientStream
}

type masterServicePushClient struct {
	grpc.ClientStream
}

func (x *masterServicePushClient) Send(m *SessionPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterServicePushClient) CloseAndRecv() (*StreamSessionPacketRsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamSessionPacketRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *masterServiceClient) Pull(ctx context.Context, in *StreamSessionPacketReq, opts ...grpc.CallOption) (MasterService_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MasterService_serviceDesc.Streams[1], "/protocol.MasterService/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterServicePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MasterService_PullClient interface {
	Recv() (*SessionPacket, error)
	grpc.ClientStream
}

type masterServicePullClient struct {
	grpc.ClientStream
}

func (x *masterServicePullClient) Recv() (*SessionPacket, error) {
	m := new(SessionPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterServiceServer is the server API for MasterService service.
type MasterServiceServer interface {
	Push(MasterService_PushServer) error
	Pull(*StreamSessionPacketReq, MasterService_PullServer) error
}

// UnimplementedMasterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (*UnimplementedMasterServiceServer) Push(srv MasterService_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedMasterServiceServer) Pull(req *StreamSessionPacketReq, srv MasterService_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}

func RegisterMasterServiceServer(s *grpc.Server, srv MasterServiceServer) {
	s.RegisterService(&_MasterService_serviceDesc, srv)
}

func _MasterService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServiceServer).Push(&masterServicePushServer{stream})
}

type MasterService_PushServer interface {
	SendAndClose(*StreamSessionPacketRsp) error
	Recv() (*SessionPacket, error)
	grpc.ServerStream
}

type masterServicePushServer struct {
	grpc.ServerStream
}

func (x *masterServicePushServer) SendAndClose(m *StreamSessionPacketRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterServicePushServer) Recv() (*SessionPacket, error) {
	m := new(SessionPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MasterService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSessionPacketReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServiceServer).Pull(m, &masterServicePullServer{stream})
}

type MasterService_PullServer interface {
	Send(*SessionPacket) error
	grpc.ServerStream
}

type masterServicePullServer struct {
	grpc.ServerStream
}

func (x *masterServicePullServer) Send(m *SessionPacket) error {
	return x.ServerStream.SendMsg(m)
}

var _MasterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _MasterService_Push_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _MasterService_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gconnd.proto",
}
