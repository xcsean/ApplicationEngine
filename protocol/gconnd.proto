syntax = "proto3";
package protocol;
import "packet.proto";

// master

message register_master_req {
    string division = 1;
}

message register_master_rsp {
    int32 result = 1;
    uint64 master_id = 2;
}

// session

message session_alloc_req {
    int32 count = 1;
}

message session_alloc_rsp {
    int32 result = 1;
    repeated uint64 session_ids = 2;
}

message session_alive_req {
    uint64 session_id = 1;
}

message session_alive_rsp {
    int32 result = 1;
    int32 status = 2;
}

service GconndService {
    rpc RegisterMaster(register_master_req) returns(register_master_rsp) {}
    rpc AllocSessionID(session_alloc_req) returns(session_alloc_rsp) {}
    rpc IsSessionAlive(session_alive_req) returns(session_alive_rsp) {}
}

service MasterService {
    rpc Push(stream session_packet) returns(stream_session_packet_rsp) {}
    rpc Pull(stream_session_packet_req) returns(stream session_packet) {}
}
