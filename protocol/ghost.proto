syntax = "proto3";
package protocol;
import "core.proto";

// ghost

message ghost_packet {
    uint32 cmd_id = 1;
    uint32 user_data = 2;
    uint32 timestamp = 3;
    repeated uint64 sessions = 4;
    string body = 5;
}

message ghost_userasset {
    uint64 uuid = 1;
    uint64 version = 2;
    string asset = 3;
}

// ghost service

message register_vm_req {
    string division = 1;
    string version = 2;
}

message register_vm_rsp {
    int32 result = 1;
    uint64 vmid = 2;
    uint64 hostid = 3;
    string desc = 4;
}

message unregister_vm_req {
    string division = 1;
    string version = 2;
    uint64 vmid = 3;
    uint64 hostid = 4;
    string desc = 5;
}

message unregister_vm_rsp {
    int32 result = 1;
    string desc = 2;
}

message bind_session_req {
    string division = 1;
    uint64 sessionid = 2;
    uint64 uuid = 3;
}

message bind_session_rsp {
    int32 result = 1;
    string division = 2;
    uint64 sessionid = 3;
    uint64 uuid = 4;
}

message unbind_session_req {
    string division = 1;
    uint64 sessionid = 2;
    uint64 uuid = 3;
}

message unbind_session_rsp {
    int32 result = 1;
    string division = 2;
    uint64 sessionid = 3;
    uint64 uuid = 4;
}

message lock_userasset_req {
    string division = 1;
    uint64 sessionid = 2;
    uint64 uuid = 3;
    int64 duration = 4;
    ghost_userasset userasset = 5;
}

message lock_userasset_rsp {
    int32 result = 1;
    int64 expired = 2;
    ghost_userasset userasset = 3;
}

message unlock_userasset_req {
    uint64 sessionid = 1;
    uint64 uuid = 2;
    ghost_userasset userasset = 3;
}

message unlock_userasset_rsp {
    int32 result = 1;
}

message debug_req {
    string division = 1;
    string cmdop = 2;
    string cmdparam = 3;
}

message debug_rsp {
    int32 result = 1;
    string desc = 2;
}

service GhostService {
    // vm management
    rpc RegisterVM(register_vm_req) returns(register_vm_rsp) {}
    rpc UnregisterVM(unregister_vm_req) returns(unregister_vm_rsp) {}

    // send packet to client(s)
    rpc SendPacket(stream session_packet) returns(send_packet_rsp) {}

    // session bind & unbind with uuid(user unique id)
    rpc BindSession(bind_session_req) returns(bind_session_rsp) {}
    rpc UnbindSession(unbind_session_req) returns(unbind_session_rsp) {}

    // user asset lock & unlock
    rpc LockUserAsset(lock_userasset_req) returns(lock_userasset_rsp) {}
    rpc UnlockUserAsset(unlock_userasset_req) returns(unlock_userasset_rsp) {}

    // debug
    rpc Debug(debug_req) returns(debug_rsp) {}
}

// vm service

message notify_status_req {
    uint32 status = 1;
}

message notify_status_rsp {
    int32 result = 1;
    string desc = 2;
}

message notify_packet_rsp {
    int32 result = 1;
}

service VMService {
    rpc OnNotifyStatus(notify_status_req) returns(notify_status_rsp) {}
    rpc OnNotifyPacket(stream ghost_packet) returns(send_packet_rsp) {}
}
